#include <avr/io.h>
#define F_CPU 16000000
#include <util/delay.h>

#define GLCD_DATABUS	PORTD // GLCD data
#define GLCD_CONTROL	PORTC // GLCD control signal
#define GLCD_DATABUS_DDR DDRD
#define GLCD_CONTROL_DDR DDRC

// Graphic LCD 명령어 셋팅
#define GLCD_CS1 0x08		 // GLCD_CS1 Select 0000 1000
#define GLCD_CS2 0x10		 // GLCD_CS2 Select 0001 0000
#define GLCD_CS1_2 0x18		 // GLCD_CS1, GLCD_CS2 Select 0001 1000

#define GLCD_START_LINE		0xC0	// 11XXXXXX: set lcd start line
#define GLCD_SET_X_ADDR		0xB8	// 10111XXX: set lcd X address
#define GLCD_SET_Y_ADDR		0x40	// 01YYYYYY: set lcd Y address

#define DISPON			0x3F
#define DISPOFF 			0x3E

unsigned char xcharacter, ycharacter;		// x character(0-7), y character(0-19)
unsigned char cursor_flag, xcursor, ycursor;	// x and y cursor position(0-7, 0-19)

unsigned char font[95][5] = {	            /* 5x7 ASCII character font */
	{0x00, 0x00, 0x00, 0x00, 0x00},		// 0x20 space
	{0x00, 0x00, 0x4f, 0x00, 0x00},		// 0x21 !
	{0x00, 0x07, 0x00, 0x07, 0x00},		// 0x22 "
	{0x14, 0x7f, 0x14, 0x7f, 0x14},		// 0x23 #
	{0x24, 0x2a, 0x7f, 0x2a, 0x12},		// 0x24 $
	{0x23, 0x13, 0x08, 0x64, 0x62},		// 0x25 %
	{0x36, 0x49, 0x55, 0x22, 0x50},		// 0x26 &
	{0x00, 0x05, 0x03, 0x00, 0x00},		// 0x27 '
	{0x00, 0x1c, 0x22, 0x41, 0x00},		// 0x28 (
	{0x00, 0x41, 0x22, 0x1c, 0x00},		// 0x29 )
	{0x14, 0x08, 0x3e, 0x08, 0x14},		// 0x2a *
	{0x08, 0x08, 0x3e, 0x08, 0x08},		// 0x2b +
	{0x00, 0x50, 0x30, 0x00, 0x00},		// 0x2c ,
	{0x08, 0x08, 0x08, 0x08, 0x08},		// 0x2d -
	{0x00, 0x60, 0x60, 0x00, 0x00},		// 0x2e .
	{0x20, 0x10, 0x08, 0x04, 0x02},		// 0x2f /
	{0x3e, 0x51, 0x49, 0x45, 0x3e},		// 0x30 0
	{0x00, 0x42, 0x7f, 0x40, 0x00},		// 0x31 1
	{0x42, 0x61, 0x51, 0x49, 0x46},		// 0x32 2
	{0x21, 0x41, 0x45, 0x4b, 0x31},		// 0x33 3
	{0x18, 0x14, 0x12, 0x7f, 0x10},		// 0x34 4
	{0x27, 0x45, 0x45, 0x45, 0x39},		// 0x35 5
	{0x3c, 0x4a, 0x49, 0x49, 0x30},		// 0x36 6
	{0x01, 0x71, 0x09, 0x05, 0x03},		// 0x37 7
	{0x36, 0x49, 0x49, 0x49, 0x36},		// 0x38 8
	{0x06, 0x49, 0x49, 0x29, 0x1e},		// 0x39 9
	{0x00, 0x36, 0x36, 0x00, 0x00},		// 0x3a :
	{0x00, 0x56, 0x36, 0x00, 0x00},		// 0x3b ;
	{0x08, 0x14, 0x22, 0x41, 0x00},		// 0x3c <
	{0x14, 0x14, 0x14, 0x14, 0x14},		// 0x3d =
	{0x00, 0x41, 0x22, 0x14, 0x08},		// 0x3e >
	{0x02, 0x01, 0x51, 0x09, 0x06},		// 0x3f ?
	{0x32, 0x49, 0x79, 0x41, 0x3e},		// 0x40 @
	{0x7e, 0x11, 0x11, 0x11, 0x7e},		// 0x41 A
	{0x7f, 0x49, 0x49, 0x49, 0x36},		// 0x42 B
	{0x3e, 0x41, 0x41, 0x41, 0x22},		// 0x43 C
	{0x7f, 0x41, 0x41, 0x22, 0x1c},		// 0x44 D
	{0x7f, 0x49, 0x49, 0x49, 0x41},		// 0x45 E
	{0x7f, 0x09, 0x09, 0x09, 0x01},		// 0x46 F
	{0x3e, 0x41, 0x49, 0x49, 0x7a},		// 0x47 G
	{0x7f, 0x08, 0x08, 0x08, 0x7f},		// 0x48 H
	{0x00, 0x41, 0x7f, 0x41, 0x00},		// 0x49 I
	{0x20, 0x40, 0x41, 0x3f, 0x01},		// 0x4a J
	{0x7f, 0x08, 0x14, 0x22, 0x41},		// 0x4b K
	{0x7f, 0x40, 0x40, 0x40, 0x40},		// 0x4c L
	{0x7f, 0x02, 0x0c, 0x02, 0x7f},		// 0x4d M
	{0x7f, 0x04, 0x08, 0x10, 0x7f},		// 0x4e N
	{0x3e, 0x41, 0x41, 0x41, 0x3e},		// 0x4f O
	{0x7f, 0x09, 0x09, 0x09, 0x06},		// 0x50 P
	{0x3e, 0x41, 0x51, 0x21, 0x5e},		// 0x51 Q
	{0x7f, 0x09, 0x19, 0x29, 0x46},		// 0x52 R
	{0x26, 0x49, 0x49, 0x49, 0x32},		// 0x53 S
	{0x01, 0x01, 0x7f, 0x01, 0x01},		// 0x54 T
	{0x3f, 0x40, 0x40, 0x40, 0x3f},		// 0x55 U
	{0x1f, 0x20, 0x40, 0x20, 0x1f},		// 0x56 V
	{0x3f, 0x40, 0x38, 0x40, 0x3f},		// 0x57 W
	{0x63, 0x14, 0x08, 0x14, 0x63},		// 0x58 X
	{0x07, 0x08, 0x70, 0x08, 0x07},		// 0x59 Y
	{0x61, 0x51, 0x49, 0x45, 0x43},		// 0x5a Z
	{0x00, 0x7f, 0x41, 0x41, 0x00},		// 0x5b [
	{0x02, 0x04, 0x08, 0x10, 0x20},		// 0x5c (\)
	{0x00, 0x41, 0x41, 0x7f, 0x00},		// 0x5d ]
	{0x04, 0x02, 0x01, 0x02, 0x04},		// 0x5e ^
	{0x40, 0x40, 0x40, 0x40, 0x40},		// 0x5f _
	{0x00, 0x01, 0x02, 0x04, 0x00},		// 0x60 `
	{0x20, 0x54, 0x54, 0x54, 0x78},		// 0x61 a
	{0x7f, 0x48, 0x44, 0x44, 0x38},		// 0x62 b
	{0x38, 0x44, 0x44, 0x44, 0x20},		// 0x63 c
	{0x38, 0x44, 0x44, 0x48, 0x7f},		// 0x64 d
	{0x38, 0x54, 0x54, 0x54, 0x18},		// 0x65 e
	{0x08, 0x7e, 0x09, 0x01, 0x02},		// 0x66 f
	{0x0c, 0x52, 0x52, 0x52, 0x3e},		// 0x67 g
	{0x7f, 0x08, 0x04, 0x04, 0x78},		// 0x68 h
	{0x00, 0x04, 0x7d, 0x00, 0x00},		// 0x69 i
	{0x20, 0x40, 0x44, 0x3d, 0x00},		// 0x6a j
	{0x7f, 0x10, 0x28, 0x44, 0x00},		// 0x6b k
	{0x00, 0x41, 0x7f, 0x40, 0x00},		// 0x6c l
	{0x7c, 0x04, 0x18, 0x04, 0x7c},		// 0x6d m
	{0x7c, 0x08, 0x04, 0x04, 0x78},		// 0x6e n
	{0x38, 0x44, 0x44, 0x44, 0x38},		// 0x6f o
	{0x7c, 0x14, 0x14, 0x14, 0x08},		// 0x70 p
	{0x08, 0x14, 0x14, 0x18, 0x7c},		// 0x71 q
	{0x7c, 0x08, 0x04, 0x04, 0x08},		// 0x72 r
	{0x48, 0x54, 0x54, 0x54, 0x20},		// 0x73 s
	{0x04, 0x3f, 0x44, 0x40, 0x20},		// 0x74 t
	{0x3c, 0x40, 0x40, 0x20, 0x7c},		// 0x75 u
	{0x1c, 0x20, 0x40, 0x20, 0x1c},		// 0x76 v
	{0x3c, 0x40, 0x30, 0x40, 0x3c},		// 0x77 w
	{0x44, 0x28, 0x10, 0x28, 0x44},		// 0x78 x
	{0x0c, 0x50, 0x50, 0x50, 0x3c},		// 0x79 y
	{0x44, 0x64, 0x54, 0x4c, 0x44},		// 0x7a z
	{0x00, 0x08, 0x36, 0x41, 0x00},		// 0x7b {
	{0x00, 0x00, 0x77, 0x00, 0x00},		// 0x7c |
	{0x00, 0x41, 0x36, 0x08, 0x00},		// 0x7d }
	{0x08, 0x04, 0x08, 0x10, 0x08}};	// 0x7e ~
void GLCD_Command(unsigned char signal, unsigned char command);
void GLCD_Clear(void);
void GLCD_xy(unsigned char x, unsigned char y);

void GLCD_Port_Init(void)
{ 
	GLCD_DATABUS_DDR = 0xFF;
	GLCD_CONTROL_DDR = 0xFF;	
}

void GLCD_Init()
{
	GLCD_Command( GLCD_CS1_2, DISPON );
	GLCD_Command( GLCD_CS1_2, 0xC0 );	/* 디스플레이 시작라인	*/
	GLCD_Command( GLCD_CS1_2, 0xB8 );	/* X 어드레스 셋 = 0	*/
	GLCD_Command( GLCD_CS1_2, 0x40 );	/* Y 어드레스 셋 = 0	*/  
	GLCD_Clear();
}

void GLCD_Command(unsigned char signal, unsigned char command)
{
	GLCD_CONTROL = signal & 0x18;	
	GLCD_CONTROL |= 0x04;	
	GLCD_DATABUS = command;	
	_delay_us(10);
	GLCD_CONTROL &= ~0x04;
	_delay_us(10);
	GLCD_CONTROL=0x00;
	_delay_ms(1);
}

void GLCD_Data(unsigned char signal, unsigned char character)
{
	GLCD_CONTROL = (signal & 0x18) | 0x01;	
	GLCD_CONTROL |= 0x04;
	GLCD_DATABUS = character;	
    	_delay_us(10);
	GLCD_CONTROL &= ~0x04;
  	  _delay_us(10);
	GLCD_CONTROL=0x00;
  	  _delay_ms(1);
}

/* clear GLCD screen */
void GLCD_Clear(void)
{
	unsigned char i, j, x;
	
	GLCD_CONTROL = 0x00;			// clear all control signals
	GLCD_Command(GLCD_CS1_2, DISPON);		// clear all control signals
	GLCD_Command(GLCD_CS1_2, 0xC0);		// CS1,CS2 display position

	x = GLCD_SET_X_ADDR;
	for(i = 0; i <= 7; i++)
	{
		GLCD_Command(GLCD_CS1_2, x);		// X start addtess	
		GLCD_Command(GLCD_CS1_2, GLCD_SET_Y_ADDR);	// Y start address
		for(j = 0; j <= 63; j++)
		{
			GLCD_Data(GLCD_CS1_2, 0x00);	// clear CS1 and CS2 screen
		}

		x++;
	}
}

void GLCD_xy(unsigned char x, unsigned char y)		/* set character position */
{ 
	xcharacter = x;
	ycharacter = y;

	GLCD_Command(GLCD_CS1_2, 0xB8+xcharacter);	// X address

	if(ycharacter <= 9)				// if y <= 9, CS1 Y address
		GLCD_Command(GLCD_CS1, 0x40+ycharacter*6+4);
	else					// if y >= 10, CS2 Y address
		GLCD_Command(GLCD_CS2, 0x40+(ycharacter-10)*6);
}

void GLCD_Character(unsigned char character)		/* display a character */
{ 
	unsigned char i, signal; //, font_data;

	GLCD_xy(xcharacter,ycharacter);
	
	if(ycharacter <= 9)				// if y <= 9, CS1
		signal = GLCD_CS1;
	else					// if y >= 10, CS2
		signal = GLCD_CS2;
	
	for(i = 0; i <= 4; i++)
	{ 
		if((cursor_flag == 1) && (xcharacter == xcursor) && (ycharacter == ycursor))
			GLCD_Data(signal,(font[character - 0x20][i]) | 0x80);
		else
			GLCD_Data(signal,font[character - 0x20][i]);
	}	
	GLCD_Data(signal,0x00);		  	// last byte 0x00

	ycharacter++;                                 	// go next character position
	if(ycharacter == 20)
	{ 
		ycharacter = 0;
		xcharacter++;
	}
}

/* display a string */ 
void GLCD_String(unsigned char x, unsigned char y, unsigned char *string){	
	xcharacter = x;
	ycharacter = y;

	while(*string != '\0')
	{
		GLCD_Character(*string);	// display a charcater
		string++;
	}
}


int main(void)
{
	unsigned char i;
	_delay_ms(50);                                 // wait for system stabilization
	GLCD_Port_Init();                             // initialize MCU and kit
	GLCD_Init();

	while(1)
	{
		// display 1st screen
		GLCD_String(3,0,"  Welcome !!  ");
		_delay_ms(50000);

		// display 2nd screen
		GLCD_String(0,0,"====================");
		GLCD_String(1,0,"  ASCII Characters  ");
		GLCD_String(2,0,"====================");
		GLCD_String(7,0,"                    ");
		GLCD_xy(3,0);
		
		for(i=0x20; i<0x7F; i++)                  // from 0x20 to 0x7E
		GLCD_Character(i);
		
		_delay_ms(50000);
		GLCD_Clear();
	}
}






//
////가위바위보
//#include <avr/io.h>
//#define F_CPU 16000000
//#include <util/delay.h>
//
//#define GLCD_DATABUS	PORTD // GLCD data
//#define GLCD_CONTROL	PORTC // GLCD control signal
//#define GLCD_DATABUS_DDR DDRD
//#define GLCD_CONTROL_DDR DDRC
//
//// Graphic LCD 명령어 셋팅
//#define GLCD_CS1 0x08		 // GLCD_CS1 Select 0000 1000
//#define GLCD_CS2 0x10		 // GLCD_CS2 Select 0001 0000
//#define GLCD_CS1_2 0x18		 // GLCD_CS1, GLCD_CS2 Select 0001 1000
//
//#define GLCD_START_LINE		0xC0	// 11XXXXXX: set lcd start line
//#define GLCD_SET_X_ADDR		0xB8	// 10111XXX: set lcd X address
//#define GLCD_SET_Y_ADDR		0x40	// 01YYYYYY: set lcd Y address
//
//#define DISPON			0x3F
//#define DISPOFF 			0x3E
//
//unsigned char xcharacter, ycharacter;		// x character(0-7), y character(0-19)
//unsigned char cursor_flag, xcursor, ycursor;	// x and y cursor position(0-7, 0-19)
//
//unsigned char font[95][5] = {	            /* 5x7 ASCII character font */
	//{0x00, 0x00, 0x00, 0x00, 0x00},		// 0x20 space
	//{0x00, 0x00, 0x4f, 0x00, 0x00},		// 0x21 !
	//{0x00, 0x07, 0x00, 0x07, 0x00},		// 0x22 "
	//{0x14, 0x7f, 0x14, 0x7f, 0x14},		// 0x23 #
	//{0x24, 0x2a, 0x7f, 0x2a, 0x12},		// 0x24 $
	//{0x23, 0x13, 0x08, 0x64, 0x62},		// 0x25 %
	//{0x36, 0x49, 0x55, 0x22, 0x50},		// 0x26 &
	//{0x00, 0x05, 0x03, 0x00, 0x00},		// 0x27 '
	//{0x00, 0x1c, 0x22, 0x41, 0x00},		// 0x28 (
	//{0x00, 0x41, 0x22, 0x1c, 0x00},		// 0x29 )
	//{0x14, 0x08, 0x3e, 0x08, 0x14},		// 0x2a *
	//{0x08, 0x08, 0x3e, 0x08, 0x08},		// 0x2b +
	//{0x00, 0x50, 0x30, 0x00, 0x00},		// 0x2c ,
	//{0x08, 0x08, 0x08, 0x08, 0x08},		// 0x2d -
	//{0x00, 0x60, 0x60, 0x00, 0x00},		// 0x2e .
	//{0x20, 0x10, 0x08, 0x04, 0x02},		// 0x2f /
	//{0x3e, 0x51, 0x49, 0x45, 0x3e},		// 0x30 0
	//{0x00, 0x42, 0x7f, 0x40, 0x00},		// 0x31 1
	//{0x42, 0x61, 0x51, 0x49, 0x46},		// 0x32 2
	//{0x21, 0x41, 0x45, 0x4b, 0x31},		// 0x33 3
	//{0x18, 0x14, 0x12, 0x7f, 0x10},		// 0x34 4
	//{0x27, 0x45, 0x45, 0x45, 0x39},		// 0x35 5
	//{0x3c, 0x4a, 0x49, 0x49, 0x30},		// 0x36 6
	//{0x01, 0x71, 0x09, 0x05, 0x03},		// 0x37 7
	//{0x36, 0x49, 0x49, 0x49, 0x36},		// 0x38 8
	//{0x06, 0x49, 0x49, 0x29, 0x1e},		// 0x39 9
	//{0x00, 0x36, 0x36, 0x00, 0x00},		// 0x3a :
	//{0x00, 0x56, 0x36, 0x00, 0x00},		// 0x3b ;
	//{0x08, 0x14, 0x22, 0x41, 0x00},		// 0x3c <
	//{0x14, 0x14, 0x14, 0x14, 0x14},		// 0x3d =
	//{0x00, 0x41, 0x22, 0x14, 0x08},		// 0x3e >
	//{0x02, 0x01, 0x51, 0x09, 0x06},		// 0x3f ?
	//{0x32, 0x49, 0x79, 0x41, 0x3e},		// 0x40 @
	//{0x7e, 0x11, 0x11, 0x11, 0x7e},		// 0x41 A
	//{0x7f, 0x49, 0x49, 0x49, 0x36},		// 0x42 B
	//{0x3e, 0x41, 0x41, 0x41, 0x22},		// 0x43 C
	//{0x7f, 0x41, 0x41, 0x22, 0x1c},		// 0x44 D
	//{0x7f, 0x49, 0x49, 0x49, 0x41},		// 0x45 E
	//{0x7f, 0x09, 0x09, 0x09, 0x01},		// 0x46 F
	//{0x3e, 0x41, 0x49, 0x49, 0x7a},		// 0x47 G
	//{0x7f, 0x08, 0x08, 0x08, 0x7f},		// 0x48 H
	//{0x00, 0x41, 0x7f, 0x41, 0x00},		// 0x49 I
	//{0x20, 0x40, 0x41, 0x3f, 0x01},		// 0x4a J
	//{0x7f, 0x08, 0x14, 0x22, 0x41},		// 0x4b K
	//{0x7f, 0x40, 0x40, 0x40, 0x40},		// 0x4c L
	//{0x7f, 0x02, 0x0c, 0x02, 0x7f},		// 0x4d M
	//{0x7f, 0x04, 0x08, 0x10, 0x7f},		// 0x4e N
	//{0x3e, 0x41, 0x41, 0x41, 0x3e},		// 0x4f O
	//{0x7f, 0x09, 0x09, 0x09, 0x06},		// 0x50 P
	//{0x3e, 0x41, 0x51, 0x21, 0x5e},		// 0x51 Q
	//{0x7f, 0x09, 0x19, 0x29, 0x46},		// 0x52 R
	//{0x26, 0x49, 0x49, 0x49, 0x32},		// 0x53 S
	//{0x01, 0x01, 0x7f, 0x01, 0x01},		// 0x54 T
	//{0x3f, 0x40, 0x40, 0x40, 0x3f},		// 0x55 U
	//{0x1f, 0x20, 0x40, 0x20, 0x1f},		// 0x56 V
	//{0x3f, 0x40, 0x38, 0x40, 0x3f},		// 0x57 W
	//{0x63, 0x14, 0x08, 0x14, 0x63},		// 0x58 X
	//{0x07, 0x08, 0x70, 0x08, 0x07},		// 0x59 Y
	//{0x61, 0x51, 0x49, 0x45, 0x43},		// 0x5a Z
	//{0x00, 0x7f, 0x41, 0x41, 0x00},		// 0x5b [
	//{0x02, 0x04, 0x08, 0x10, 0x20},		// 0x5c (\)
	//{0x00, 0x41, 0x41, 0x7f, 0x00},		// 0x5d ]
	//{0x04, 0x02, 0x01, 0x02, 0x04},		// 0x5e ^
	//{0x40, 0x40, 0x40, 0x40, 0x40},		// 0x5f _
	//{0x00, 0x01, 0x02, 0x04, 0x00},		// 0x60 `
	//{0x20, 0x54, 0x54, 0x54, 0x78},		// 0x61 a
	//{0x7f, 0x48, 0x44, 0x44, 0x38},		// 0x62 b
	//{0x38, 0x44, 0x44, 0x44, 0x20},		// 0x63 c
	//{0x38, 0x44, 0x44, 0x48, 0x7f},		// 0x64 d
	//{0x38, 0x54, 0x54, 0x54, 0x18},		// 0x65 e
	//{0x08, 0x7e, 0x09, 0x01, 0x02},		// 0x66 f
	//{0x0c, 0x52, 0x52, 0x52, 0x3e},		// 0x67 g
	//{0x7f, 0x08, 0x04, 0x04, 0x78},		// 0x68 h
	//{0x00, 0x04, 0x7d, 0x00, 0x00},		// 0x69 i
	//{0x20, 0x40, 0x44, 0x3d, 0x00},		// 0x6a j
	//{0x7f, 0x10, 0x28, 0x44, 0x00},		// 0x6b k
	//{0x00, 0x41, 0x7f, 0x40, 0x00},		// 0x6c l
	//{0x7c, 0x04, 0x18, 0x04, 0x7c},		// 0x6d m
	//{0x7c, 0x08, 0x04, 0x04, 0x78},		// 0x6e n
	//{0x38, 0x44, 0x44, 0x44, 0x38},		// 0x6f o
	//{0x7c, 0x14, 0x14, 0x14, 0x08},		// 0x70 p
	//{0x08, 0x14, 0x14, 0x18, 0x7c},		// 0x71 q
	//{0x7c, 0x08, 0x04, 0x04, 0x08},		// 0x72 r
	//{0x48, 0x54, 0x54, 0x54, 0x20},		// 0x73 s
	//{0x04, 0x3f, 0x44, 0x40, 0x20},		// 0x74 t
	//{0x3c, 0x40, 0x40, 0x20, 0x7c},		// 0x75 u
	//{0x1c, 0x20, 0x40, 0x20, 0x1c},		// 0x76 v
	//{0x3c, 0x40, 0x30, 0x40, 0x3c},		// 0x77 w
	//{0x44, 0x28, 0x10, 0x28, 0x44},		// 0x78 x
	//{0x0c, 0x50, 0x50, 0x50, 0x3c},		// 0x79 y
	//{0x44, 0x64, 0x54, 0x4c, 0x44},		// 0x7a z
	//{0x00, 0x08, 0x36, 0x41, 0x00},		// 0x7b {
	//{0x00, 0x00, 0x77, 0x00, 0x00},		// 0x7c |
	//{0x00, 0x41, 0x36, 0x08, 0x00},		// 0x7d }
	//{0x08, 0x04, 0x08, 0x10, 0x08}};	// 0x7e ~
//void GLCD_Command(unsigned char signal, unsigned char command);
//void GLCD_Clear(void);
//void GLCD_xy(unsigned char x, unsigned char y);
//
//void GLCD_Port_Init(void)
//{ 
	//GLCD_DATABUS_DDR = 0xFF;
	//GLCD_CONTROL_DDR = 0xFF;	
//}
//
//void GLCD_Init()
//{
	//GLCD_Command( GLCD_CS1_2, DISPON );
	//GLCD_Command( GLCD_CS1_2, 0xC0 );	/* 디스플레이 시작라인	*/
	//GLCD_Command( GLCD_CS1_2, 0xB8 );	/* X 어드레스 셋 = 0	*/
	//GLCD_Command( GLCD_CS1_2, 0x40 );	/* Y 어드레스 셋 = 0	*/  
	//GLCD_Clear();
//}
//
//void GLCD_Command(unsigned char signal, unsigned char command)
//{
	//GLCD_CONTROL = signal & 0x18;	
	//GLCD_CONTROL |= 0x04;	
	//GLCD_DATABUS = command;	
	//_delay_us(10);
	//GLCD_CONTROL &= ~0x04;
	//_delay_us(10);
	//GLCD_CONTROL=0x00;
	//_delay_ms(1);
//}
//
//void GLCD_Data(unsigned char signal, unsigned char character)
//{
	//GLCD_CONTROL = (signal & 0x18) | 0x01;	
	//GLCD_CONTROL |= 0x04;
	//GLCD_DATABUS = character;	
    	//_delay_us(10);
	//GLCD_CONTROL &= ~0x04;
  	  //_delay_us(10);
	//GLCD_CONTROL=0x00;
  	  //_delay_ms(1);
//}
//
///* clear GLCD screen */
//void GLCD_Clear(void)
//{
	//unsigned char i, j, x;
	//
	//GLCD_CONTROL = 0x00;			// clear all control signals
	//GLCD_Command(GLCD_CS1_2, DISPON);		// clear all control signals
	//GLCD_Command(GLCD_CS1_2, 0xC0);		// CS1,CS2 display position
//
	//x = GLCD_SET_X_ADDR;
	//for(i = 0; i <= 7; i++)
	//{
		//GLCD_Command(GLCD_CS1_2, x);		// X start addtess	
		//GLCD_Command(GLCD_CS1_2, GLCD_SET_Y_ADDR);	// Y start address
		//for(j = 0; j <= 63; j++)
		//{
			//GLCD_Data(GLCD_CS1_2, 0x00);	// clear CS1 and CS2 screen
		//}
//
		//x++;
	//}
//}
//
//void GLCD_xy(unsigned char x, unsigned char y)		/* set character position */
//{ 
	//xcharacter = x;
	//ycharacter = y;
//
	//GLCD_Command(GLCD_CS1_2, 0xB8+xcharacter);	// X address
//
	//if(ycharacter <= 9)				// if y <= 9, CS1 Y address
		//GLCD_Command(GLCD_CS1, 0x40+ycharacter*6+4);
	//else					// if y >= 10, CS2 Y address
		//GLCD_Command(GLCD_CS2, 0x40+(ycharacter-10)*6);
//}
//
//void GLCD_Character(unsigned char character)		/* display a character */
//{ 
	//unsigned char i, signal; //, font_data;
//
	//GLCD_xy(xcharacter,ycharacter);
	//
	//if(ycharacter <= 9)				// if y <= 9, CS1
		//signal = GLCD_CS1;
	//else					// if y >= 10, CS2
		//signal = GLCD_CS2;
	//
	//for(i = 0; i <= 4; i++)
	//{ 
		//if((cursor_flag == 1) && (xcharacter == xcursor) && (ycharacter == ycursor))
			//GLCD_Data(signal,(font[character - 0x20][i]) | 0x80);
		//else
			//GLCD_Data(signal,font[character - 0x20][i]);
	//}	
	//GLCD_Data(signal,0x00);		  	// last byte 0x00
//
	//ycharacter++;                                 	// go next character position
	//if(ycharacter == 20)
	//{ 
		//ycharacter = 0;
		//xcharacter++;
	//}
//}
//
///* display a string */ 
//void GLCD_String(unsigned char x, unsigned char y, unsigned char *string){	
	//xcharacter = x;
	//ycharacter = y;
//
	//while(*string != '\0')
	//{
		//GLCD_Character(*string);	// display a charcater
		//string++;
	//}
//}
//
//
//int main(void)
//{
	//unsigned char i;
	//_delay_ms(50);                                 // wait for system stabilization
	//GLCD_Port_Init();                             // initialize MCU and kit
	//GLCD_Init();
//
	//while(1)
	//{
		//// display 1st screen
		//GLCD_String(3,0,"  Welcome !!  ");
		//_delay_ms(50000);
//
		//// display 2nd screen
		//GLCD_String(0,0,"====================");
		//GLCD_String(1,0,"  ASCII Characters  ");
		//GLCD_String(2,0,"====================");
		//GLCD_String(7,0,"                    ");
		//GLCD_xy(3,0);
		//
		//for(i=0x20; i<0x7F; i++)                  // from 0x20 to 0x7E
		//GLCD_Character(i);
		//
		//_delay_ms(50000);
		//GLCD_Clear();
	//}
//}



//
#include <avr/io.h>
#define F_CPU 16000000
#include <util/delay.h>

#define GLCD_DATABUS	PORTD // GLCD data
#define GLCD_CONTROL	PORTC // GLCD control signal
#define GLCD_DATABUS_DDR DDRD
#define GLCD_CONTROL_DDR DDRC

// Graphic LCD 명령어 셋팅
#define GLCD_CS1 0x08		 // GLCD_CS1 Select 0000 1000
#define GLCD_CS2 0x10		 // GLCD_CS2 Select 0001 0000
#define GLCD_CS1_2 0x18		 // GLCD_CS1, GLCD_CS2 Select 0001 1000

#define GLCD_START_LINE		0xC0	// 11XXXXXX: set lcd start line
#define GLCD_SET_X_ADDR		0xB8	// 10111XXX: set lcd X address
#define GLCD_SET_Y_ADDR		0x40	// 01YYYYYY: set lcd Y address

#define DISPON			0x3F
#define DISPOFF 			0x3E

#define KEY_DDR DDRF
#define KEY_PORT PORTF
#define KEY_PIN PINF

unsigned char xcharacter, ycharacter;		// x character(0-7), y character(0-19)
unsigned char cursor_flag, xcursor, ycursor;	// x and y cursor position(0-7, 0-19)

unsigned char font[95][5] = {	            /* 5x7 ASCII character font */
	{0x00, 0x00, 0x00, 0x00, 0x00},		// 0x20 space
	{0x00, 0x00, 0x4f, 0x00, 0x00},		// 0x21 !
	{0x00, 0x07, 0x00, 0x07, 0x00},		// 0x22 "
	{0x14, 0x7f, 0x14, 0x7f, 0x14},		// 0x23 #
	{0x24, 0x2a, 0x7f, 0x2a, 0x12},		// 0x24 $
	{0x23, 0x13, 0x08, 0x64, 0x62},		// 0x25 %
	{0x36, 0x49, 0x55, 0x22, 0x50},		// 0x26 &
	{0x00, 0x05, 0x03, 0x00, 0x00},		// 0x27 '
	{0x00, 0x1c, 0x22, 0x41, 0x00},		// 0x28 (
	{0x00, 0x41, 0x22, 0x1c, 0x00},		// 0x29 )
	{0x14, 0x08, 0x3e, 0x08, 0x14},		// 0x2a *
	{0x08, 0x08, 0x3e, 0x08, 0x08},		// 0x2b +
	{0x00, 0x50, 0x30, 0x00, 0x00},		// 0x2c ,
	{0x08, 0x08, 0x08, 0x08, 0x08},		// 0x2d -
	{0x00, 0x60, 0x60, 0x00, 0x00},		// 0x2e .
	{0x20, 0x10, 0x08, 0x04, 0x02},		// 0x2f /
	{0x3e, 0x51, 0x49, 0x45, 0x3e},		// 0x30 0
	{0x00, 0x42, 0x7f, 0x40, 0x00},		// 0x31 1
	{0x42, 0x61, 0x51, 0x49, 0x46},		// 0x32 2
	{0x21, 0x41, 0x45, 0x4b, 0x31},		// 0x33 3
	{0x18, 0x14, 0x12, 0x7f, 0x10},		// 0x34 4
	{0x27, 0x45, 0x45, 0x45, 0x39},		// 0x35 5
	{0x3c, 0x4a, 0x49, 0x49, 0x30},		// 0x36 6
	{0x01, 0x71, 0x09, 0x05, 0x03},		// 0x37 7
	{0x36, 0x49, 0x49, 0x49, 0x36},		// 0x38 8
	{0x06, 0x49, 0x49, 0x29, 0x1e},		// 0x39 9
	{0x00, 0x36, 0x36, 0x00, 0x00},		// 0x3a :
	{0x00, 0x56, 0x36, 0x00, 0x00},		// 0x3b ;
	{0x08, 0x14, 0x22, 0x41, 0x00},		// 0x3c <
	{0x14, 0x14, 0x14, 0x14, 0x14},		// 0x3d =
	{0x00, 0x41, 0x22, 0x14, 0x08},		// 0x3e >
	{0x02, 0x01, 0x51, 0x09, 0x06},		// 0x3f ?
	{0x32, 0x49, 0x79, 0x41, 0x3e},		// 0x40 @
	{0x7e, 0x11, 0x11, 0x11, 0x7e},		// 0x41 A
	{0x7f, 0x49, 0x49, 0x49, 0x36},		// 0x42 B
	{0x3e, 0x41, 0x41, 0x41, 0x22},		// 0x43 C
	{0x7f, 0x41, 0x41, 0x22, 0x1c},		// 0x44 D
	{0x7f, 0x49, 0x49, 0x49, 0x41},		// 0x45 E
	{0x7f, 0x09, 0x09, 0x09, 0x01},		// 0x46 F
	{0x3e, 0x41, 0x49, 0x49, 0x7a},		// 0x47 G
	{0x7f, 0x08, 0x08, 0x08, 0x7f},		// 0x48 H
	{0x00, 0x41, 0x7f, 0x41, 0x00},		// 0x49 I
	{0x20, 0x40, 0x41, 0x3f, 0x01},		// 0x4a J
	{0x7f, 0x08, 0x14, 0x22, 0x41},		// 0x4b K
	{0x7f, 0x40, 0x40, 0x40, 0x40},		// 0x4c L
	{0x7f, 0x02, 0x0c, 0x02, 0x7f},		// 0x4d M
	{0x7f, 0x04, 0x08, 0x10, 0x7f},		// 0x4e N
	{0x3e, 0x41, 0x41, 0x41, 0x3e},		// 0x4f O
	{0x7f, 0x09, 0x09, 0x09, 0x06},		// 0x50 P
	{0x3e, 0x41, 0x51, 0x21, 0x5e},		// 0x51 Q
	{0x7f, 0x09, 0x19, 0x29, 0x46},		// 0x52 R
	{0x26, 0x49, 0x49, 0x49, 0x32},		// 0x53 S
	{0x01, 0x01, 0x7f, 0x01, 0x01},		// 0x54 T
	{0x3f, 0x40, 0x40, 0x40, 0x3f},		// 0x55 U
	{0x1f, 0x20, 0x40, 0x20, 0x1f},		// 0x56 V
	{0x3f, 0x40, 0x38, 0x40, 0x3f},		// 0x57 W
	{0x63, 0x14, 0x08, 0x14, 0x63},		// 0x58 X
	{0x07, 0x08, 0x70, 0x08, 0x07},		// 0x59 Y
	{0x61, 0x51, 0x49, 0x45, 0x43},		// 0x5a Z
	{0x00, 0x7f, 0x41, 0x41, 0x00},		// 0x5b [
	{0x02, 0x04, 0x08, 0x10, 0x20},		// 0x5c (\)
	{0x00, 0x41, 0x41, 0x7f, 0x00},		// 0x5d ]
	{0x04, 0x02, 0x01, 0x02, 0x04},		// 0x5e ^
	{0x40, 0x40, 0x40, 0x40, 0x40},		// 0x5f _
	{0x00, 0x01, 0x02, 0x04, 0x00},		// 0x60 `
	{0x20, 0x54, 0x54, 0x54, 0x78},		// 0x61 a
	{0x7f, 0x48, 0x44, 0x44, 0x38},		// 0x62 b
	{0x38, 0x44, 0x44, 0x44, 0x20},		// 0x63 c
	{0x38, 0x44, 0x44, 0x48, 0x7f},		// 0x64 d
	{0x38, 0x54, 0x54, 0x54, 0x18},		// 0x65 e
	{0x08, 0x7e, 0x09, 0x01, 0x02},		// 0x66 f
	{0x0c, 0x52, 0x52, 0x52, 0x3e},		// 0x67 g
	{0x7f, 0x08, 0x04, 0x04, 0x78},		// 0x68 h
	{0x00, 0x04, 0x7d, 0x00, 0x00},		// 0x69 i
	{0x20, 0x40, 0x44, 0x3d, 0x00},		// 0x6a j
	{0x7f, 0x10, 0x28, 0x44, 0x00},		// 0x6b k
	{0x00, 0x41, 0x7f, 0x40, 0x00},		// 0x6c l
	{0x7c, 0x04, 0x18, 0x04, 0x7c},		// 0x6d m
	{0x7c, 0x08, 0x04, 0x04, 0x78},		// 0x6e n
	{0x38, 0x44, 0x44, 0x44, 0x38},		// 0x6f o
	{0x7c, 0x14, 0x14, 0x14, 0x08},		// 0x70 p
	{0x08, 0x14, 0x14, 0x18, 0x7c},		// 0x71 q
	{0x7c, 0x08, 0x04, 0x04, 0x08},		// 0x72 r
	{0x48, 0x54, 0x54, 0x54, 0x20},		// 0x73 s
	{0x04, 0x3f, 0x44, 0x40, 0x20},		// 0x74 t
	{0x3c, 0x40, 0x40, 0x20, 0x7c},		// 0x75 u
	{0x1c, 0x20, 0x40, 0x20, 0x1c},		// 0x76 v
	{0x3c, 0x40, 0x30, 0x40, 0x3c},		// 0x77 w
	{0x44, 0x28, 0x10, 0x28, 0x44},		// 0x78 x
	{0x0c, 0x50, 0x50, 0x50, 0x3c},		// 0x79 y
	{0x44, 0x64, 0x54, 0x4c, 0x44},		// 0x7a z
	{0x00, 0x08, 0x36, 0x41, 0x00},		// 0x7b {
	{0x00, 0x00, 0x77, 0x00, 0x00},		// 0x7c |
	{0x00, 0x41, 0x36, 0x08, 0x00},		// 0x7d }
	{0x08, 0x04, 0x08, 0x10, 0x08}};	// 0x7e ~
		
	unsigned char key_scan(unsigned char a);
	int key_convert1(unsigned char in);
	int key_convert2(unsigned char in);
	int result(int a, int b);
	
	void GLCD_Command(unsigned char signal, unsigned char command);
	void GLCD_Clear(void);
	void GLCD_xy(unsigned char x, unsigned char y);

	void GLCD_Port_Init(void)
	{
		GLCD_DATABUS_DDR = 0xFF;
		GLCD_CONTROL_DDR = 0xFF;
	}

	void GLCD_Init()
	{
		GLCD_Command( GLCD_CS1_2, DISPON );
		GLCD_Command( GLCD_CS1_2, 0xC0 );	/* 디스플레이 시작라인	*/
		GLCD_Command( GLCD_CS1_2, 0xB8 );	/* X 어드레스 셋 = 0	*/
		GLCD_Command( GLCD_CS1_2, 0x40 );	/* Y 어드레스 셋 = 0	*/
		GLCD_Clear();
	}

	void GLCD_Command(unsigned char signal, unsigned char command)
	{
		GLCD_CONTROL = signal & 0x18;
		GLCD_CONTROL |= 0x04;
		GLCD_DATABUS = command;
		_delay_us(10);
		GLCD_CONTROL &= ~0x04;
		_delay_us(10);
		GLCD_CONTROL=0x00;
		_delay_ms(1);
	}

	void GLCD_Data(unsigned char signal, unsigned char character)
	{
		GLCD_CONTROL = (signal & 0x18) | 0x01;
		GLCD_CONTROL |= 0x04;
		GLCD_DATABUS = character;
		_delay_us(10);
		GLCD_CONTROL &= ~0x04;
		_delay_us(10);
		GLCD_CONTROL=0x00;
		_delay_ms(1);
	}

	/* clear GLCD screen */
	void GLCD_Clear(void)
	{
		unsigned char i, j, x;
		
		GLCD_CONTROL = 0x00;			// clear all control signals
		GLCD_Command(GLCD_CS1_2, DISPON);		// clear all control signals
		GLCD_Command(GLCD_CS1_2, 0xC0);		// CS1,CS2 display position

		x = GLCD_SET_X_ADDR;
		for(i = 0; i <= 7; i++)
		{
			GLCD_Command(GLCD_CS1_2, x);		// X start addtess
			GLCD_Command(GLCD_CS1_2, GLCD_SET_Y_ADDR);	// Y start address
			for(j = 0; j <= 63; j++)
			{
				GLCD_Data(GLCD_CS1_2, 0x00);	// clear CS1 and CS2 screen
			}

			x++;
		}
	}

	void GLCD_xy(unsigned char x, unsigned char y)		/* set character position */
	{
		xcharacter = x;
		ycharacter = y;

		GLCD_Command(GLCD_CS1_2, 0xB8+xcharacter);	// X address

		if(ycharacter <= 9)				// if y <= 9, CS1 Y address
		GLCD_Command(GLCD_CS1, 0x40+ycharacter*6+4);
		else					// if y >= 10, CS2 Y address
		GLCD_Command(GLCD_CS2, 0x40+(ycharacter-10)*6);
	}

	void GLCD_Character(unsigned char character)		/* display a character */
	{
		unsigned char i, signal; //, font_data;

		GLCD_xy(xcharacter,ycharacter);
		
		if(ycharacter <= 9)				// if y <= 9, CS1
		signal = GLCD_CS1;
		else					// if y >= 10, CS2
		signal = GLCD_CS2;
		
		for(i = 0; i <= 4; i++)
		{
			if((cursor_flag == 1) && (xcharacter == xcursor) && (ycharacter == ycursor))
			GLCD_Data(signal,(font[character - 0x20][i]) | 0x80);
			else
			GLCD_Data(signal,font[character - 0x20][i]);
		}
		GLCD_Data(signal,0x00);		  	// last byte 0x00

		ycharacter++;                                 	// go next character position
		if(ycharacter == 20)
		{
			ycharacter = 0;
			xcharacter++;
		}
	}

	/* display a string */
	void GLCD_String(unsigned char x, unsigned char y, unsigned char *string){
		xcharacter = x;
		ycharacter = y;

		while(*string != '\0')
		{
			GLCD_Character(*string);	// display a charcater
			string++;
		}
	}


	int main(void)
	{
		unsigned char in_a,in_b,in_r,in0,in1,in2,in3;
		unsigned int a,b,res;

		
		_delay_ms(50);                                 // wait for system stabilization
		GLCD_Port_Init();                             // initialize MCU and kit
		GLCD_Init();

		while(1)
		{
			// A가 낼것 정하기
		// 키패드 첫번째줄 스캔
			in0 = key_scan(0x01);
			// 키패드 두번째줄 스캔
			in1 = key_scan(0x02);
			// 키패드 세번째줄 스캔
			in2 = key_scan(0x04);
			// 키패드 네번째줄 스캔
			in3 = key_scan(0x08);
			
			in_a = (in3 | in2 | in1 | in0); //4줄 입력 값 취합
			
			in_a = key_convert1(in_a);   //키 입력 값을 숫자로 변환
			
				switch(in_a)
				{
					case 1:
					GLCD_String(1,0,"==========A=========");
					GLCD_String(3,0,"  Rock ");
					_delay_ms(1000);
					a=1;
					break;

					case 2 :
					GLCD_String(1,0,"==========A=========");
					GLCD_String(3,0,"  paper ");
					_delay_ms(1000);
					a=2;
					break;

					case 3 :
					GLCD_String(1,0,"==========A=========");
					GLCD_String(3,0,"   scissors ");
					_delay_ms(1000);
					a=3;
					break;
					
					default : break;
				}

	
			//B가 낼것 정하기
			in0 = key_scan(0x01);
						
			in1 = key_scan(0x02);
						
			in2 = key_scan(0x04);
						
			in3 = key_scan(0x08);
						
			in_b = (in3 | in2 | in1 | in0); //4줄 입력 값 취합
						
			in_b = key_convert2(in_b);   //키 입력 값을 숫자로 변환
			
			switch(in_b)
				{
					case 1:
					GLCD_String(1,0,"==========B=========");
					GLCD_String(3,0,"  Rock ");
					_delay_ms(1000);
					b=1;
					break;

					case 2 :
					GLCD_String(1,0,"==========B=========");
					GLCD_String(3,0,"  paper ");
					_delay_ms(1000);
					b=2;
					break;

					case 3 :
					GLCD_String(1,0,"==========B=========");
					GLCD_String(3,0,"   scissors ");
					_delay_ms(1000);
					b=3;
					break;
					
					default : break;
				}
	

			//승부 결과 출력
			res=result(a,b);
			
			switch(res){
				case 0:
					GLCD_String(1,0,"=======result=======");
					GLCD_String(3,0,"  DRAW ");
					_delay_ms(1000);
				break;
				
				case 1:
					GLCD_String(1,0,"=======result=======");
					GLCD_String(3,0,"  A- WIN ");
					_delay_ms(1000);
				break;
			
				case 2:
					GLCD_String(1,0,"=======result=======");
					GLCD_String(3,0,"  B- WIN ");
					_delay_ms(1000);
				break;							
			}

			GLCD_Clear();
		}
		
	}

unsigned char key_scan(unsigned char a)
{
unsigned char in;

KEY_DDR = 0xFF;    //all out
KEY_PORT = a;      //키패드 줄 위치
KEY_DDR = 0x0F;    //Port 7bit~4bit(In) 3bit~0bit(Out)
_delay_us(50);

// 키패드 입력 포트의 상위 4자리 값 추출
in = (PINF & 0xF0);
if(in != 0x00)
{
in |= a;
return in;
}
return 0;
}

int key_convert1(unsigned char in)
{
	int returnvalue;

	switch(in)
	{
		case 0x11 :
		returnvalue = 1;
		break;

		case 0x21 :
		returnvalue = 2;
		break;

		case 0x41 :
		returnvalue = 3;
		break;
		
		default : returnvalue = 0;  break;
	}
	return returnvalue;
}


int key_convert2(unsigned char in)
{
	int returnvalue;

	switch(in)
	{
		case 0x12 :
		returnvalue = 1;
		break;

		case 0x22 :
		returnvalue = 2;
		break;

		case 0x42 :
		returnvalue = 3;
		break;
		
		default : returnvalue = 0;  break;
	}
	return returnvalue;
}

int result(int a, int b){
	
	if(a == b){
		return 0;
	}

	else if(a==1 && b== 2){
		return 2;
	}
	
	else if(a==1 && b==3){
		return 1;
	}
	
	else if(a==2 && b== 3){
		return 2;
	}
	
	else if(a==2 && b==1){
		return 1;
	}

	else if(a==3 && b== 1){
		return 2;
	}
	
	else if(a==3 && b==2){
		return 1;
	}		
}