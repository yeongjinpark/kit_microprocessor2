////산토끼 연주하기
//#include <avr/io.h>
//#include <avr/interrupt.h>
//#define F_CPU 16000000UL
//#include <util/delay.h>
//#define DO 0     //도
//#define RE 1     //레
//#define MI 2     //미
//#define FA 3     //파
//#define SOL 4    //솔
//#define RA 5     //라
//#define SI 6     //시
//#define DDO 7    //도
//#define EOS -1
//#define ON 0
//#define OFF 1
//
//volatile int state, tone;
//char f_table[8]={17,43,66,77,97,114,117,137};  //도,레,미,파,솔,라,시,도
//int song[]={SOL, MI,MI,SOL,MI,DO,RE,MI,RE,DO,MI,SOL,DDO,SOL,DDO,SOL,DDO,SOL,MI,SOL,RE,FA,MI,RE,DO,EOS};
//
//
//ISR(TIMER0_OVF_vect)
//{
	//if(state==ON){   //상태가 on인 경우
		//PORTB=0x00;   //포트b종료
		//state=OFF;    //off로 전환
	//}
	//else                 //상태가 off인 경우
	//{
		//PORTB=0x10;            //포트b에 1공급
		//state=ON;           //on으로 전환
	//}
	//TCNT0=f_table[tone];           //음이 변경되면 cnt에 f_table[tone]값 설정
	////0.5초동안 유지
//}
//
//int main(){
//
	//int i=0;
	//DDRB =0x10;                 //포트B의 bit4를  출력 상태로 세팅
	//TCCR0=0x03;              //32분주
	//TIMSK=0x01;               //오버플로우 인터럽트 사용
	//TCNT0= f_table[song[i]];   //카운트에 시작값을 f_table[song[i]] 설정
	//sei();                       //전역 인터럽트
	//do{
		//tone=song[i++];        //다음번 음을 tone에 가져온다
		//_delay_ms(500);        //
	//}
	//while(tone != EOS);
//
//}


//// 초음파센서 HC-SR04 포트 B의 2번 3번에 연결. FND 출력
//#include <avr/io.h>
//#define F_CPU 16000000UL
//#include <util/delay.h>
//
//#define TRIG 2 // HC-SR04 Trigger 신호 (출력)
//#define ECHO 3 // HC-SR04 Echo 신호 (입력)
//
//#define FND_DB_DDR	DDRC
//#define FND_DB_PORT	PORTC
//
//#define FND_CT_DDR	DDRG
//#define FND_CT_PORT	PORTG
//
//#define SONIC_DDR	DDRB
//#define SONIC_PORT	PORTB
//#define SONIC_PIN	PINB
//
//#define TRIG_HIGH	(1<<TRIG)
//#define TRIG_LOW	~(1<<TRIG)
//#define ECHO_HIGH	(1<<ECHO)
//#define ECHO_LOW	~(1<<ECHO)
//
//unsigned char digit[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x67};
//unsigned char fnd_sel[4] = {0x01, 0x02, 0x04, 0x08};
//unsigned char fnd[4];
//
////FND에 숫자를 표시하는 함수
//void display_fnd(unsigned int value)
//{
	//int i;
	//
	//fnd[3] = (value/1000) % 10;
	//fnd[2] = (value/100) % 10;
	//fnd[1] = (value/10) % 10;
	//fnd[0] = (value/1) % 10;
//
	//for(i=0; i<4; i++){
		//FND_DB_PORT = digit[fnd[i]];
		//
		//FND_CT_PORT = fnd_sel[i];
		//_delay_ms(2);
		//if(i%2)
		//_delay_ms(1);
	//}
//}
//
//
//int main(void)
//{
	//unsigned int distance;
//
	//FND_DB_DDR = 0xFF;
	//FND_CT_DDR = 0x0F;
//
	//// 포트 B의 TRIG 포트(2번핀)은 출력, ECHO 포트(3번핀)는 입력으로 설정
	//SONIC_DDR |= (TRIG_HIGH & ECHO_LOW);
	//// OR 연산을 하는 이유는 포트 B 2,3번 핀 외의 다른 핀은 건드리지 않기 위해서임.
//
	//while(1){
		//// 1. Trigger 펄스 공급
		//SONIC_PORT &= ~TRIG_HIGH; // Trig = LOW
		//_delay_us(10);
		//SONIC_PORT |= TRIG_HIGH; // Trig = HIGH
		//_delay_us(10);
		//SONIC_PORT &= ~TRIG_HIGH; // Trig = LOW
//
		//// 2. ECHO 입력으로 거리 계산
		//TCCR1B = 0x02; // Timer/Counter 1 클럭 0.5us
		//
		//while(!(SONIC_PIN & ECHO_HIGH)); // wait until Echo = HIGH;
		//TCNT1 = 0x0000;  // Timer/Counter 1 값 동작 시작
//
		//while(SONIC_PIN & ECHO_HIGH); // wait until Echo = LOW;
		//TCCR1B = 0x00;  // Timer/Counter 1 값 동작 정지
//
		//// TCNT1에는 Echo 신호가 HIGH로 유지된 카운트 수 저장
		//distance = (unsigned int) (TCNT1 / 2 / 58);
		//// 시간에 비례하는 거리 보정 함수 적용
		//display_fnd(distance);
	//}
//}






////산토끼 연주하기- song배열 삭제
//#include <avr/io.h>
//#include <avr/interrupt.h>
//#define F_CPU 16000000UL
//#include <util/delay.h>
//#define DO 0     //도
//#define RE 1     //레
//#define MI 2     //미
//#define FA 3     //파
//#define SOL 4    //솔
//#define RA 5     //라
//#define SI 6     //시
//#define DDO 7    //도
//#define EOS -1
//#define ON 0
//#define OFF 1
//
//
//volatile int state=OFF, tone=0;
//char f_table[8]={17,43,66,77,97,114,117,137};  //도,레,미,파,솔,라,시,도
//
//
//ISR(TIMER0_OVF_vect)
//{
//if(state==ON){   //상태가 on인 경우
//PORTB=0x00;   //포트b종료
//state=OFF;    //off로 전환
//}
//else                 //상태가 off인 경우
//{
//PORTB=0x10;            //포트b에 1공급
//state=ON;           //on으로 전환
//}
//TCNT0=f_table[tone];           //음이 변경되면 cnt에 f_table[tone]값 설정
////0.5초동안 유지
//}
//
//int main(){
//
//int i=0;
//DDRB =0x10;                 //포트B의 bit4를  출력 상태로 세팅
//TCCR0=0x03;              //32분주
//TIMSK=0x01;               //오버플로우 인터럽트 사용
//TCNT0= f_table[tone];   //카운트에 시작값을 f_table[tone]] 설정
//sei();                       //전역 인터럽트
//
//
//for(i=0; i<8; i++){
	//tone= f_table[i];
//}
//
//
//}



// 초음파센서 HC-SR04 포트 B의 2번 3번에 연결. FND 출력
#include <avr/io.h>

#include <avr/interrupt.h>

#define F_CPU 16000000UL
#include <util/delay.h>

#define TRIG 2 // HC-SR04 Trigger 신호 (출력)
#define ECHO 3 // HC-SR04 Echo 신호 (입력)

#define FND_DB_DDR	DDRC
#define FND_DB_PORT	PORTC

#define FND_CT_DDR	DDRG
#define FND_CT_PORT	PORTG

#define SONIC_DDR	DDRB
#define SONIC_PORT	PORTB
#define SONIC_PIN	PINB

#define TRIG_HIGH	(1<<TRIG)
#define TRIG_LOW	~(1<<TRIG)
#define ECHO_HIGH	(1<<ECHO)
#define ECHO_LOW	~(1<<ECHO)

#define Buzz_HIGH  

#define ON 0
#define OFF 1

volatile int state=OFF, tone=0;
char f_table[8]={17,43,66,77,97,114,117,137};  //도,레,미,파,솔,라,시,도

unsigned char digit[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x67};
unsigned char fnd_sel[4] = {0x01, 0x02, 0x04, 0x08};
unsigned char fnd[4];


ISR(TIMER0_OVF_vect)
{
if(state==ON){   //상태가 on인 경우
PORTB=0x00;   //포트b종료
state=OFF;    //off로 전환
}
else                 //상태가 off인 경우
{
PORTB=0x10;            //포트b에 1공급
state=ON;           //on으로 전환
}
TCNT0=f_table[tone];           //음이 변경되면 cnt에 f_table[tone]값 설정
//0.5초동안 유지
}


//FND에 숫자를 표시하는 함수
void display_fnd(unsigned int value)
{
int i;

fnd[3] = (value/1000) % 10;
fnd[2] = (value/100) % 10;
fnd[1] = (value/10) % 10;
fnd[0] = (value/1) % 10;

for(i=0; i<4; i++){
FND_DB_PORT = digit[fnd[i]];

FND_CT_PORT = fnd_sel[i];
_delay_ms(2);
if(i%2)
_delay_ms(1);
}
}




int main(void)
{
	unsigned int distance;


DDRB =0x10;                 //포트B의 bit4를  출력 상태로 세팅
TCCR0=0x03;              //32분주
TIMSK=0x01;               //오버플로우 인터럽트 사용
TCNT0= f_table[tone];   //카운트에 시작값을 f_table[tone]] 설정
sei();                       //전역 인터럽트


	FND_DB_DDR = 0xFF;
	FND_CT_DDR = 0x0F;

	// 포트 B의 TRIG 포트(2번핀)은 출력, ECHO 포트(3번핀)는 입력으로 설정
	SONIC_DDR |= (TRIG_HIGH & ECHO_LOW);

	// OR 연산을 하는 이유는 포트 B 2,3번 핀 외의 다른 핀은 건드리지 않기 위해서임.

	while(1){
		// 1. Trigger 펄스 공급
		SONIC_PORT &= ~TRIG_HIGH; // Trig = LOW
		_delay_us(10);
		SONIC_PORT |= TRIG_HIGH; // Trig = HIGH
		_delay_us(10);
		SONIC_PORT &= ~TRIG_HIGH; // Trig = LOW

		// 2. ECHO 입력으로 거리 계산
		TCCR1B = 0x02; // Timer/Counter 1 클럭 0.5us

		while(!(SONIC_PIN & ECHO_HIGH)); // wait until Echo = HIGH;
		TCNT1 = 0x0000;  // Timer/Counter 1 값 동작 시작

		while(SONIC_PIN & ECHO_HIGH); // wait until Echo = LOW;
		TCCR1B = 0x00;  // Timer/Counter 1 값 동작 정지

		// TCNT1에는 Echo 신호가 HIGH로 유지된 카운트 수 저장
		distance = (unsigned int) (TCNT1 / 2 / 58);
		if(distance <= 100){
		tone=f_table[0];
		}
		else if(distance <= 100){
				tone=f_table[1];
			}
			
		else if(distance > 100 && distance <=200){
				tone=f_table[2];
			}
				
		else if(distance >200 && distance <=300){
				tone=f_table[3];
			}
					
		else if(distance >300 && distance <= 400){
				tone=f_table[4];
			}
						
		else if(distance >400 &&distance <= 500){
				tone=f_table[5];
			}
			
		else if(distance >500 && distance <=600){
			tone=f_table[6];
		}
		
		else if(distance >600 && distance <= 700){
			tone=f_table[7];
		}
		
		else if(distance >700){
			tone=f_table[8];
		}
		
		
		// 시간에 비례하는 거리 보정 함수 적용
		display_fnd(distance);


	}
}