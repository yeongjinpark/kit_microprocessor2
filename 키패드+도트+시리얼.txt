

#include <avr/io.h>
#include <stdio.h>
#define F_CPU 16000000UL
#include <util/delay.h>

static int putchar0(int c, FILE *stream);
static FILE mystdout =FDEV_SETUP_STREAM(putchar0, NULL, _FDEV_SETUP_WRITE);

#define UP 2
#define DOWN 8
#define LEFT 4
#define RIGHT 6

#define KEY_DDR DDRF
#define KEY_PORT PORTF
#define KEY_PIN PINF

#define DOT8_DATA_DDR   DDRA
#define DOT8_DATA_PORT   PORTA

#define DOT8_LINE_DDR   DDRC
#define DOT8_LINE_PORT   PORTC

unsigned char key_scan(unsigned char a);
int key_convert(unsigned char in);



//char getchar0()
//{
//while(!(UCSR0A & (1<<RXC0)));
//return(UDR0);
//}

int main()
{
volatile const unsigned char dot[8]={0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f};
	
DOT8_DATA_DDR=0xff;
DOT8_LINE_DDR=0xff;

volatile unsigned char in, in0,in1,in2,in3, i=0, j=0, x=0, y=0;

UBRR0H=0;               //12번 비트가 의미를 가짐
UBRR0L=8;               // 16Mhz, 115200baud

UCSR0B=0x18;             //Receive(RX) 및 Transmit(TX) Enable
UCSR0C=0x06;             //비동기, no parity, stop bit 1, 데이터 비트수 8-bit
stdout=&mystdout;

while(1)
{
	//키패드 첫번째줄 스캔
	in0=key_scan(0x01);
	
	//키패드 첫번째줄 스캔
	in1=key_scan(0x02);
	
	//키패드 첫번째줄 스캔
	in2=key_scan(0x04);
	
	//키패드 첫번째줄 스캔
	in3=key_scan(0x08);
	
	
	in=(in3 | in2| in1| in0);  //4줄 입력 값 취합
	in=key_convert(in);   //키 입력값을 숫자로 변환 

if(in>0 && in<10){
switch(in){
case UP:
if(y>0) y--;
break;
case DOWN:
if(y<7) y++;
break;
case LEFT:
if(x>0) x--;
break;
case RIGHT:
if(x<7) x++;
break;
}
printf("x=%d y=%d\n", x, y);
}
//도트패턴을 지속적으로 표시하면서 키입력 간격을 조절하기 위한 인덱스 j를 추가하여
//for문으로 도트표시 시간을 늘림
for(j=0; j<20; j++){
	for(i=0; i<8; i++){
		
		if(i==y)
			DOT8_DATA_PORT=dot[x];
		else
			DOT8_DATA_PORT=0xff;
			
		DOT8_LINE_PORT=1<<i;
		_delay_ms(1);
	}
}
}
}

//키패드에 각 줄에 입력값이 있는지 스캔하는 함수
unsigned char key_scan(unsigned char a)
{
unsigned char in;

KEY_DDR = 0xFF;    //all out
KEY_PORT = a;      //키패드 줄 위치
KEY_DDR = 0x0F;    //Port 7bit~4bit(In) 3bit~0bit(Out)
_delay_us(50);

// 키패드 입력 포트의 상위 4자리 값 추출
in = (PINF & 0xF0);
if(in != 0x00)
{
in |= a;
return in;
}
return 0;
}


int key_convert(unsigned char in){
	int returnvalue;
	
	switch(in){
		case 0x81 : returnvalue=1;
		break;
		
		case 0x41 : returnvalue=UP;
		break;
		
		case 0x21 : returnvalue=3;
		break;
		
		case 0x82 : returnvalue=LEFT;
		break;
		
		case 0x42 : returnvalue=5;
		break;
		
		case 0x22 : returnvalue=RIGHT;
		break;
		
		case 0x84 : returnvalue=7;
		break;
		
		case 0x44 : returnvalue=DOWN;
		break;
		
		case 0x24 : returnvalue=9;
		break;
		
		default : returnvalue=0;
		break;
	}
	return returnvalue;
}


static int putchar0(int c, FILE *stream)
{

	if(c=='\n')
	putchar0('\r',stream);
	//while(!(UCSR0A & (1<<UDRE0)));
	while(!(UCSR0A & 0x20));
	UDR0=c;
	return 0;
}